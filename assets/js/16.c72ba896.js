(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{481:function(t,s,a){"use strict";a.r(s);var n=a(18),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"for"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for"}},[t._v("#")]),t._v(" for")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("定义: 最原始的方法，用来遍历数组")])]),t._v(" "),a("li",[a("p",[t._v("优点:")]),t._v(" "),a("ul",[a("li",[t._v("程序简洁，结构清晰，循环初始化，循环变量化，循环体和循环条件位置突出")]),t._v(" "),a("li",[t._v("可以用"),a("code",[t._v("continue || break || return")]),t._v("等语句中断")])])]),t._v(" "),a("li",[a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("结构比"),a("code",[t._v("while")]),t._v("复杂，容易编码错误")]),t._v(" "),a("li",[t._v("不可以遍历对象，得先转化为数组类型")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用Object.keys属性转化")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最后就可以用来遍历了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 2 3")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"for-in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[t._v("#")]),t._v(" for-in")]),t._v(" "),a("ul",[a("li",[t._v("定义: 遍历数组索引/对象属性，循环中的index是string类型，每执行一次，就会对数组的索引或者对象的属性进行一次操作")]),t._v(" "),a("li",[t._v("优点:\n"),a("ul",[a("li",[t._v("遍历对象简洁方便")]),t._v(" "),a("li",[t._v("可以遍历数组的键名")])])]),t._v(" "),a("li",[t._v("缺点:\n"),a("ul",[a("li",[t._v("会出现随机顺序的遍历，因为里面的值是"),a("code",[t._v("string")]),t._v("类型，所以增加了转换过程，导致开销较大")])])])]),t._v(" "),a("h2",{attrs:{id:"for-of"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[t._v("#")]),t._v(" for-of")]),t._v(" "),a("ul",[a("li",[t._v("定义: 遍历数组中的元素")]),t._v(" "),a("li",[t._v("优点:\n"),a("ul",[a("li",[t._v("最简洁，最直接的遍历数组的语法")]),t._v(" "),a("li",[t._v("可以用"),a("code",[t._v("continue || break || return")]),t._v("等语句中断")]),t._v(" "),a("li",[t._v("可以遍历数组/类数组对象/字符串/Map/Set")])])]),t._v(" "),a("li",[t._v("缺点:\n"),a("ul",[a("li",[t._v("不可以遍历对象，得先转化为数组类型")])])])]),t._v(" "),a("h2",{attrs:{id:"for-each"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-each"}},[t._v("#")]),t._v(" for-each")]),t._v(" "),a("ul",[a("li",[t._v("定义: 调用数组中的元素，并传递给回调")]),t._v(" "),a("li",[t._v("优点:\n"),a("ul",[a("li",[t._v("写法简洁，不用关心集合的下标，减少出错")])])]),t._v(" "),a("li",[t._v("缺点:\n"),a("ul",[a("li",[t._v("不能同时遍历多个集合")]),t._v(" "),a("li",[t._v("遍历时无法修改或删除集合")]),t._v(" "),a("li",[t._v("每次循环其实是一个回调函数，所以在函数内部不能通过"),a("code",[t._v("continue || break || return")]),t._v("等语句中断")]),t._v(" "),a("li",[t._v("不可以遍历对象，得先转化为数组类型")])])])])])}),[],!1,null,null,null);s.default=r.exports}}]);